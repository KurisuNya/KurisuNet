auto_register:
  - ./example/yolov12/module.yaml
global_vars:
  - scales:
      # depth, width, max_ch
      n: [0.50, 0.25, 1024]
      s: [0.50, 0.50, 1024]
      m: [0.50, 1.00, 512]
      l: [1.00, 1.00, 512]
      x: [1.00, 1.50, 512]

YOLOv12:
  args: [in_ch, class_num, scale: "~n"]
  vars:
    # prettier-ignore
    - original_c: [64, 128, 256, 256, 512, 512, 512, 1024, 1024, 512, 256, 256, 512, 512, 1024]
    - original_n: [2, 2, 4, 4, 2, 2, 2, 2]
    - c: "[min(int(x * scales[scale][1]), scales[scale][2]) for x in original_c]"
    - n: "[int(x * scales[scale][0]) for x in original_n]"
    - residual: scale in ['l', 'x']
    - ratio: "1.2 if scale in ['l', 'x'] else 2"
    - c3k: scale in ['m', 'l', 'x']

    - Concat: "lambda *x: torch.cat(x, 1)"
  layers:
    # backbone
    - [-1, Conv, [in_ch, "c[0]", 3, 2]]
    - [-1, Conv, ["c[0]", "c[1]", 3, 2]]
    - [-1, C3k2, ["c[1]", "c[2]", "n[0]", c3k, 0.25]]
    - [-1, Conv, ["c[2]", "c[3]", 3, 2]]
    - [-1, C3k2, ["c[3]", "c[4]", "n[1]", c3k, 0.25]]
    - [-1, Conv, ["c[4]", "c[5]", 3, 2]]
    - [-1, A2C2f, ["c[5]", "c[6]", "n[2]", True, 4, residual, ratio]]
    - [-1, Conv, ["c[6]", "c[7]", 3, 2]]
    - [-1, A2C2f, ["c[7]", "c[8]", "n[3]", True, 1, residual, ratio]]
    # head
    - [-1, nn.Upsample, [None, 2, "~nearest"]]
    - [[-1, 7], Concat]
    - [-1, A2C2f, ["c[8]+c[6]", "c[9]", "n[4]", False, -1, residual, ratio]]

    - [-1, nn.Upsample, [None, 2, "~nearest"]]
    - [[-1, 5], Concat]
    - [-1, A2C2f, ["c[9]+c[4]", "c[10]", "n[5]", False, -1, residual, ratio]]

    - [-1, Conv, ["c[10]", "c[11]", 3, 2]]
    - [[-1, 12], Concat]
    - [-1, A2C2f, ["c[11]+c[9]", "c[12]", "n[6]", False, -1, residual, ratio]]

    - [-1, Conv, ["c[12]", "c[13]", 3, 2]]
    - [[-1, 9], Concat]
    - [-1, C3k2, ["c[13]+c[8]", "c[14]", "n[7]", True]]
    - [[15, 18, 21], Detect, [class_num, "(c[10], c[12], c[14])"]]
