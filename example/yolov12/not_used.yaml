C2f:
  args: [c1, c2, n: 1, shortcut: True, g: 1, e: 0.5]
  vars:
    - hid_c: int(c2 * e)
    - bottleneck_args: "[hid_c, hid_c, shortcut, g, ((3, 3), (3, 3)), 1]"
    - bottleneck_former: "lambda i: {-1: 1} if i == 0 else -1"
    - cat_former: "[{-n-1: 0}, {-n-1: 1}] + list(range(-n, 0))"
  layers:
    - [-1, Conv, [c1, hid_c * 2, 1, 1]]
    - [-1, "lambda x: x.chunk(2, 1)"]
    - "[[bottleneck_former(i), Bottleneck, bottleneck_args] for i in range(n)]"
    - [cat_former, "lambda *x: torch.cat(x, 1)"]
    - [-1, Conv, [hid_c * (2 + n), c2, 1]]

C3:
  args: [c1, c2, n: 1, shortcut: True, g: 1, e: 0.5]
  vars:
    - hid_c: int(c2 * e)
    - bottleneck_args: "[hid_c, hid_c, shortcut, g, ((1, 1), (3, 3)), 1]"
  layers:
    - [-1, Conv, [c1, hid_c, 1, 1]] # cv1
    - "[[-1, Bottleneck, bottleneck_args] for _ in range(n)]" # bottleneck
    - [0, Conv, [c1, hid_c, 1, 1]] # cv2
    - [[-2, -1], "lambda *x: torch.cat(x, 1)"] # cat
    - [-1, Conv, [2 * hid_c, c2, 1]] # cv3
